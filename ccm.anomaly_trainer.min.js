"use strict";(()=>{const component={name:"anomaly_trainer",ccm:"./libs/ccm/ccm.min.js",config:{css:["ccm.load",["./libs/bootstrap-5/css/bootstrap.min.css","./resources/styles.min.css"],{url:"./libs/bootstrap-5/css/bootstrap-fonts.min.css",context:"head"}],helper:["ccm.load",{url:"./libs/ccm/helper.min.js",type:"module"}],html:["ccm.load",{url:"./resources/templates.min.js",type:"module"}],onfinish:{restart:true},toposort:["ccm.load",{url:"./libs/toposort/toposort.min.js#toposort",type:"module"}],title:"Anomalie-Trainer",task:"Prüfen Sie, ob während der folgenden beiden Datenbank-Transaktionen eine Anomalie aufgetreten ist.",cols:["","T1","T2","A","a1","a2","B","b1","b2"],ops:{read1:"read({A},{a})",read2:"read({A},{a})",add_x:"{a} = {a} + {x}",write:"write({A},{a})",rollb:"rollback"},t_ops:[["read1","read2","add_x","write","rollb"],["read1","add_x","write"]],random:{b:3,read2:3,rollb:3,value:[10,80],summand:[1,9]},buttons:{generate:"Neue Konstellation generieren",yes:"Ja",neither:"",no:"Nein",submit:"Abschicken"},topology:[[["T1,read1","T1,read2"],["T1,read2","T1,add_x"],["T1,add_x","T1,write"],["T1,read2","T1,rollb"],["T2,read1","T2,add_x"],["T2,add_x","T2,write"]],{label:"Lost Update",rules:[["T1,read2","T2,write"],["T2,write","T1,write"]]},{label:"Non-Repeatable Read",rules:[["T1,read1","T2,write"],["T2,write","T1,read2"]]},{label:"Dirty Read",rules:[["T1,write","T2,read1"],["T2,read1","T1,rollb"]]}]},Instance:function(){let $;const constellations=[];let repeats=0;let steps=[];this.init=async()=>{$=Object.assign({},this.ccm.helper,this.helper);$.use(this.ccm)};this.ready=async()=>{this.onready&&await this.onready({instance:this})};this.start=async()=>{const random=(min,max)=>Math.floor(Math.random()*(max-min+1)+min);const summand=[];do{const[min,max]=this.random.summand;summand[0]=random(min,max);summand[1]=random(min,max)}while(summand[0]===summand[1]);steps.length=0;for(let i=1;i<=2;i++)(this.t_ops?this.t_ops[i-1]:Object.keys(this.ops)).forEach((op=>steps.push("T"+i+","+op)));steps=this.toposort($.shuffleArray(steps),this.topology[0]);if(constellations.includes(steps.toString())){if(++repeats>=100){repeats=0;constellations.length=0}return this.start()}constellations.push(steps.toString());const[min,max]=this.random.value;const values=[random(min,max),0,0,random(min,max),0,0];const rollbacks=[false,false];steps=steps.filter((step=>{let[t,op]=step.split(",");t=t[1]-1;const rollback=rollbacks[t];if(op==="read2"&&this.random?.read2&&random(0,this.random.read2-1))return false;if(op==="rollb"){if(this.random?.rollb&&random(0,this.random.rollb-1))return false;rollbacks[t]=true}return!rollback}));const table=steps.map(((step,i)=>{let[t,op]=step.split(",");t=parseInt(t[1]);const b=t===2&&random(1,this.random.b);switch(op){case"read1":case"read2":values[t]=values[0];break;case"add_x":values[t]+=summand[t-1];break;case"write":values[0]=values[t];values[t]=0;break;case"rollb":values[t]=0;break}op=this.ops[op];op=op.replaceAll("{a}",b?"b":"a").replaceAll("{A}",t===2&&random(1,this.random.b)?"B":"A");op=op.replaceAll("{x}",summand[t-1]);return[i+1,t===1?op:"",t===2?op:""].concat(values.map((value=>value||"-")))}));random(0,1)&&table.forEach((row=>[row[1],row[2],row[3],row[4],row[5]]=[row[2],row[1],row[3],row[5],row[4]]));table.unshift(this.cols.map((col=>col.replaceAll("{A}",b?"B":"A").replaceAll("{a}",b?"b":"a"))));this.html.render(this.html.main(this,table),this.element);this.onstart&&await this.onstart({instance:this})};this.onGenerate=()=>this.start().then((()=>this.html.render(this.html.inputs(this),this.element.querySelector("#inputs"))));this.onAnswer=()=>this.html.render(this.html.inputs(this,Object.values($.formData(this.element))),this.element.querySelector("#inputs"));this.onSubmit=()=>{const inputs=Object.values($.formData(this.element));const solutions=this.topology.slice(1).map((topology=>{const order=topology.rules.map((rule=>{rule=rule.map((op=>steps.indexOf(op)));return!rule.includes(-1)&&rule[0]<rule[1]}));return!order.includes(false)}));this.html.render(this.html.inputs(this,inputs,solutions),this.element.querySelector("#inputs"))}}};let b="ccm."+component.name+(component.version?"-"+component.version.join("."):"")+".js";if(window.ccm&&null===window.ccm.files[b])return window.ccm.files[b]=component;(b=window.ccm&&window.ccm.components[component.name])&&b.ccm&&(component.ccm=b.ccm);"string"===typeof component.ccm&&(component.ccm={url:component.ccm});let c=(component.ccm.url.match(/(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)/)||[""])[0];if(window.ccm&&window.ccm[c])window.ccm[c].component(component);else{var a=document.createElement("script");document.head.appendChild(a);component.ccm.integrity&&a.setAttribute("integrity",component.ccm.integrity);component.ccm.crossorigin&&a.setAttribute("crossorigin",component.ccm.crossorigin);a.onload=function(){(c="latest"?window.ccm:window.ccm[c]).component(component);document.head.removeChild(a)};a.src=component.ccm.url}})();
//# sourceMappingURL=ccm.anomaly_trainer.min.js.map